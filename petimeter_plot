#! /usr/bin/env python
import json
import argparse
import sys 
import matplotlib.pyplot as plt
import functools
#import seaborn as sns
#import numpy as np


#[name]['cdna_coverage'])
#, data[name]['five_prime_extent'], data[name]['three_prime_extent'])

# Constants
c_complete_threshold = 0.95     # 95% of a cDNAmust be aligned in order to count as "complete", otherwise partial.
c_partial_threshold = 0.5

def count_complete_etc(l):
    '''
    Input: A list of values in [0,1] representing how much of a cDNA mapped to an assembly.
    Output: a 3-tuple counting complete, partial, and fragmented genes.
    
    We define the three classes as using two thresholds: c_complete_threshold and c_partial_threshold.
    '''

    n_complete = n_partial = n_fragmented = 0
    for x in l:
        if x >= c_complete_threshold:
            n_complete += 1
        elif x >= c_partial_threshold:
            n_partial += 1
        else:
            n_fragmented += 1

    return (n_complete, n_partial, n_fragmented)

#############################################################################################


def autolabel(a, rects, labels):
    '''
    Autolabel puts numbers at the top of bars in the plot_bars function.
    '''
    # attach some text labels
    for rect in rects:
        # width = rect.get_width()
        w = labels.pop(0)
        a.text(w-200, rect.get_y()+rect.get_height()/2, '%d'%int(w), ha='right', va='center', zorder=20)


def plot_bars(prefix, d):
    '''Input: 
       - prefix is for the output filename,
       - d is the dict of dicts with datasets
    '''
    plt.clf()

    width = 0.3
    labels = d.keys()    
    y = np.arange(0.5, len(labels)/2.0+0.5, 0.5)
    
    counts = map(lambda n: count_complete_etc(d[n]['cDNA_coverage'].values()), labels)

    completes = map(lambda x: x[0], counts)
    partials  = map(lambda x: x[1], counts)
    fragmented= map(lambda x: x[2], counts)
    total = map(lambda a,b,c: a+b+c, completes, partials, fragmented)

    scilifelabgreen=(0.523, 0.738, 0.281)
    scilifelabblue=(0.0469, 0.586, 0.684)

    p1 = plt.barh(y, completes,  width, color=scilifelabgreen, align='center', zorder=10)
    p2 = plt.barh(y, partials,   width, color=scilifelabblue, left=completes, align='center', zorder=10)
    p3 = plt.barh(y, fragmented, width, color="0.75", left=map(lambda a,b: a+b, completes,partials), align='center', zorder=10)

    plt.xlabel('# cDNA in assemblies')
    plt.yticks(y, labels)
    
    l = plt.legend( (p1[0], p2[0], p3[0]), ('Complete', 'Partial', 'Fragment'), loc='upper center', ncol=3, prop={'size':10})
    l.set_zorder(10)
    ygridlines = plt.getp(plt.gca(), 'ygridlines')

    plt.grid(axis='x', color='gray', linestyle='dashed', which='both')

    plt.tight_layout()

    autolabel(plt, p3, total)

    file_name = prefix +'_contents.pdf' # output file. Suffix decides format
    plt.savefig(file_name, transparent=True)
    
#############################################################################################

def minmax_of_x_percent_of_list(x, l):
    '''
    Return the smallest of the top 95% values and largest of the bottom 95% values.
    '''
    s = sorted(l)
    five_percent = (1-x) * len(s) # Not really 5% any more... Now it is adjustable!
    return (min(s[int(five_percent):-1]), max(s[0:len(s) - int(five_percent) - 1]))


def find_x_percent_extents(x, d):
    # Try to find appropriate cutoffs to the left and right to avoid
    # too much flatness in the margins.
    left95p = 0
    right95p = 0
    for name in d.keys():
        three_prime_extent = d[name]['three_prime_extent']
        five_prime_extent = map(lambda x: -x, d[name]['five_prime_extent'])

        (a,b) = minmax_of_x_percent_of_list(x, five_prime_extent)
        left95p = min(left95p, a)
        (a,b) = minmax_of_x_percent_of_list(x, three_prime_extent)
        right95p = max(right95p, b)
    return (left95p, right95p)


def plot_utrs(prefix, max_extent, d):
    '''
    Input: 
       - prefix is for the output filename,
       - d is the dict of dicts with datasets

    Output: A pdf, named using the prefix, of densities of 5' and 3' UTRS lengths.
    '''
    
    plt.clf()
    f, (ax5p, ax3p) = plt.subplots(1,2, sharey=True)
    ax5p.locator_params(nbins=4)
    ax3p.locator_params(nbins=4)
  
    for name in d.keys():
        three_prime_extent = d[name]['three_prime_extent']
        five_prime_extent = map(lambda x: -x, d[name]['five_prime_extent'])

        x5 = np.array(five_prime_extent)
        x3 = np.array(three_prime_extent)
        left = min(x5)
        right= max(x3)

        #sns.kdeplot(x5,             cut=1, ax=ax5p)
        #sns.kdeplot(x3, label=name, cut=1, ax=ax3p)
        sns.kdeplot(x5,             clip=(left, 0), ax=ax5p)
        sns.kdeplot(x3, label=name, clip=(0, right), ax=ax3p)

    percentile = 0.95
    if max_extent:
        if (max_extent < 1):
            percentile = float(max_extent)
        else:
            ax5p.set_xlim(-int(max_extent), 0)
            ax3p.set_xlim(0, int(max_extent))
    else:
        (left_percentile, right_percentile) = find_x_percent_extents(percentile, d)
        ax5p.set_xlim(left_percentile, 0)
        ax3p.set_xlim(0, right_percentile)


    ax5p.set_title('Possible UTR extent')
#    ax5p.xlabel("UTR extent on 5' and 3' end of CDS")  
    plt.legend(fontsize='x-small')
    file_name = prefix +'_utrs.pdf' # output file. Suffix decides format
    plt.savefig(file_name, transparent=True)


#############################################################################################
def count_larger_elems(l, threshold):
    '''
    How many elements in l are larger than threshold?
    '''
    return reduce(lambda count, x: count if x < threshold else count + 1, l, 0)


def plot_counts(prefix, d):
    '''
    Input: 
       - prefix is for the output filename,
       - d is the dict of dicts with datasets

    Output: A pdf showing how gene count is affected by extent threshold (>x% of cDNA covered).
    '''
    
    plt.clf()
    f = plt.figure()
    ax= plt.subplot(111)
    plt.xlim(0, 1)
    plt.xlabel('mapped extent')

    x = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
    for name in d.keys():
        coverage = d[name]['cDNA_coverage'].values()
        count_fcn = functools.partial(count_larger_elems, coverage)
        y = map(count_fcn, x)
        ax.plot(x, y, label=name)

    plt.ylim(ymin=0)
    #    plt.legend(loc='upper right')

    # Shrink current axis by 20%
    box = ax.get_position()
    ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])
    legend = ax.legend(bbox_to_anchor=(1.25, 1))
    for label in legend.get_texts():
        label.set_fontsize('small')


    ax.grid(color='gray', linestyle='dashed', which='both')
    file_name = prefix +'_counts.pdf' # output file. Suffix decides format
    plt.savefig(file_name, transparent=True)


#############################################################################################


def plot_cdna_coverage(prefix, d):
    '''Input: 
       - prefix is for the output filename,
       - d is a dictionary containing (somewhere...) coverage as a list of numbers saying how much of cDNA was mapped.
    '''
    plt.clf()
    plt.title('cDNA coverage')
    plt.xlabel("")
#    plt.xlim(0,1)
    
    names = d.keys()
    data = map(lambda n: d[n]['cDNA_coverage'].values(), names)
 #    for name in d.keys():
#        data[name] = d[name]['cDNA_coverage']

        #    plt.violinplot(data) # Only works in matplotlib version 1.4
    plt.boxplot(data)


#        x = np.array(d[name]['cDNA_coverage'])
#        sns.kdeplot(x, label=name)
#        plt.hist(x, 20, histtype='step', label=name)

#    plt.legend(fontsize='x-small')
    file_name = prefix +'_cdna_coverage.pdf' # output file. Suffix decides format
    plt.savefig(file_name, transparent=True)

#############################################################################################




if __name__ == "__main__":

    # Requires python 2.7 or later (due to the dictionary comprehensions?)
    if sys.version_info[0] < 2 or (sys.version_info[0] >= 2 and sys.version_info[1] < 7):
        print("This script requires Python version 2.7 or later")
        sys.exit(1)

    parser = argparse.ArgumentParser(description='Take one or several JSON files from petimeter and plot the distributions.')
    parser.add_argument('output_prefix')
    parser.add_argument('jsonfiles', nargs='+')
    parser.add_argument('-e', '--max_extent', action='store', help='Maximal extent of UTRs in plot. Instead of choosing max extent from data, use this number.')

    args = parser.parse_args()

    data={}                     # We will collect all data here for plotting
    for f in args.jsonfiles:
        try:
            j_file = open(f)
            rawdata = json.load(j_file)
        except Exception, e:
            sys.stderr.write("Warning: Could not read JSON data from file '" + f + "'. Ignoring and continuing.\n")

        dataset_name = rawdata.get('name')
        if dataset_name:
            del rawdata['name'] # 'name' is meta data, the rest /should/ be data for plotting
        else:
            sys.stderr.write("Warning: file '" + f + "' is probably not output from petimeter: the dataset name (may be filename) is missing. Ignoring and continuing.\n")
            continue

        data[dataset_name] = {}
        for k in rawdata.keys():
            data[dataset_name][k] = rawdata[k]

#    plot_utrs(args.output_prefix, args.max_extent, data)
#    plot_cdna_coverage(args.output_prefix, data)
#    plot_bars(args.output_prefix, data)
    plot_counts(args.output_prefix, data)
